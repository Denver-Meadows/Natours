.row {
  max-width: $grid-width;
  margin: 0 auto; /* will center a block element inside another block element */

  // not is used to tell css not to use the below code on the specified element that was passed in (last-child)
  &:not(:last-child) {
    margin-bottom: $gutter-vertical;

    @include respond(tab-port) {
      margin-bottom: $gutter-vertical-small; // reducing the gutter
    }
  }

  @include respond(tab-port) {
    max-width: 50rem; // very important to reduce the max-width of the row from line 1.
    padding-top: 0 3rem
  }

  // When floating, the height element collapses and becomes zero.  We use clearfix to correct.
  @include clearfix;

  // Since all "cols" will have the same bg, float and margin-right, we can select them all with the below code.
  // Select all class that start(^) with "col-"
  [class^="col-"] {
    float: left;

    &:not(:last-child) {
      margin-right: $gutter-horizontal;

      @include respond(tab-port) {
        margin-right: 0; // remove the margin once screen reduces in size
        margin-bottom: $gutter-vertical-small;
      }
    }

    @include respond(tab-port) {
      width: 100% !important; // Standard practice which causes each column to take up 100% and stack

    }
  }

  .col-1-of-2 {
    width: calc((100% - #{$gutter-horizontal}) / 2);
  }

  .col-1-of-3 {
    width: calc((100% - 2 * #{$gutter-horizontal}) / 3);
  }

  .col-2-of-3 {
    width: calc((2 * (100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
  }

  .col-1-of-4 {
    width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
  }

  .col-2-of-4 {
    width: calc((2 * (100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal});
  }

  .col-3-of-4 {
    width: calc((3 * (100% - 3 * #{$gutter-horizontal}) / 4) + 2 * #{$gutter-horizontal});
  }
}